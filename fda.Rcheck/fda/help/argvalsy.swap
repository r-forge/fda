argvalsy.swap              package:fda              R Documentation

_S_w_a_p _a_r_g_v_a_l_s _w_i_t_h _y _i_f _t_h_e _l_a_t_t_e_r _i_s _s_i_m_p_l_e_r.

_D_e_s_c_r_i_p_t_i_o_n:

     Preprocess 'argvals', 'y', and 'basisobj'.  If only one of
     'argvals' and 'y' is provided, use  it as 'y' and take 'argvals'
     as a vector spanning basisobj[['rangreval']].  If both are
     provided, the simpler becomes 'argvals'.  If both have the same
     dimensions but only one lies in basisobj[['rangreval']], that
     becomes 'argvals'.

_U_s_a_g_e:

     argvalsy.swap(argvals=NULL, y=NULL, basisobj=NULL) 

_A_r_g_u_m_e_n_t_s:

 argvals: a vector or array of argument values. 

       y: an array containing sampled values of curves.   

basisobj: One of the following:


        _b_a_s_i_s_f_d a functional basis object (class 'basisfd'. 

        _f_d a functional data object (class 'fd'), from which its
             'basis' component is extracted.  

        _f_d_P_a_r a functional parameter object (class 'fdPar'), from which
             its 'basis' component is extracted.  

        _i_n_t_e_g_e_r an integer giving the order of a B-spline basis,
             create.bspline.basis(argvals, norder=basisobj) 

        _n_u_m_e_r_i_c _v_e_c_t_o_r specifying the knots for a B-spline basis,
             create.bspline.basis(basisobj)  

        _N_U_L_L Defaults to create.bspline.basis(argvals).


_D_e_t_a_i_l_s:

     1.  If 'y' is NULL, replace by 'argvals'.

     2.  If 'argvals' is NULL, replace by
     seq(basisobj[['rangeval']][1], basisobj[['rangeval']][2],
     dim(y)[1]) with a warning.  

     3.  If the dimensions of 'argvals' and 'y' match and only one is
     contained in basisobj[['rangeval']], use that as 'argvals' and the
     other as 'y'.

     4.  if 'y' has fewer dimensions than 'argvals', swap them.

_V_a_l_u_e:

     a list with components 'argvals', 'y', and 'basisobj'.

_S_e_e _A_l_s_o:

     'Data2fd'  'smooth.basis',  'smooth.basisPar'

_E_x_a_m_p_l_e_s:

     ##
     ## one argument:  y
     ##
     argvalsy.swap(1:5)
     # warning ... 

     ##
     ## (argvals, y), same dimensions:  retain order 
     ##
     argy1 <- argvalsy.swap(seq(0, 1, .2), 1:6)
     argy1a <- argvalsy.swap(1:6, seq(0, 1, .2))


     all.equal(argy1[[1]], argy1a[[2]]) &&
     all.equal(argy1[[2]], argy1a[[1]])
     # TRUE;  basisobj different 


     # lengths do not match 
     ## Not run: 
     argvalsy.swap(1:4, 1:5)
     ## End(Not run) 

     ##
     ## two numeric arguments, different dimensions:  put simplest first 
     ##
     argy2 <- argvalsy.swap(seq(0, 1, .2), matrix(1:12, 6))


     all.equal(argy2,
     argvalsy.swap(matrix(1:12, 6), seq(0, 1, .2)) )
     # TRUE with a warning ... 


     ## Not run: 
     argvalsy.swap(seq(0, 1, .2), matrix(1:12, 2))
     # ERROR:  first dimension does not match 
     ## End(Not run)

     ##
     ## one numeric, one basisobj
     ##
     argy3 <- argvalsy.swap(1:6, b=4)
     # warning:  argvals assumed seq(0, 1, .2) 

     argy3. <- argvalsy.swap(1:6, b=create.bspline.basis(breaks=0:1))
     # warning:  argvals assumed seq(0, 1, .2) 

     argy3.6 <- argvalsy.swap(seq(0, 1, .2), b=create.bspline.basis(breaks=1:3))
     # warning:  argvals assumed seq(1, 3 length=6)

     ##
     ## two numeric, one basisobj:  first matches basisobj
     ##
     #  OK 
     argy3a <- argvalsy.swap(1:6, seq(0, 1, .2),
                   create.bspline.basis(breaks=c(1, 4, 8))) 

     #  Swap (argvals, y) 

     all.equal(argy3a,
     argvalsy.swap(seq(0, 1, .2), 1:6, 
                   create.bspline.basis(breaks=c(1, 4, 8))) )
     # TRUE with a warning 


     ## Not run: 
     # neither match basisobj:  error  
     argvalsy.swap(seq(0, 1, .2), 1:6, 
                   create.bspline.basis(breaks=1:3) ) 
     ## End(Not run)

