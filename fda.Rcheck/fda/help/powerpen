powerpen                 package:fda                 R Documentation

_P_o_w_e_r _P_e_n_a_l_t_y _M_a_t_r_i_x

_D_e_s_c_r_i_p_t_i_o_n:

     Computes the matrix defining the roughness penalty for functions
     expressed in terms of a power basis.

_U_s_a_g_e:

     powerpen(basisobj, Lfdobj=int2Lfd(2))

_A_r_g_u_m_e_n_t_s:

basisobj: a power basis object. 

  Lfdobj: either a nonnegative integer or a linear differential
          operator object. 

_D_e_t_a_i_l_s:

     A roughness penalty for a function $ x(t) $ is defined by
     integrating the square of either the derivative of  $ x(t) $ or,
     more generally, the result of applying a linear differential
     operator $ L $ to it.  The most common roughness penalty is the
     integral of the square of the second derivative, and this is the
     default. To apply this roughness penalty, the matrix of inner
     products produced by this function is necessary.

_V_a_l_u_e:

     a symmetric matrix of order equal to the number of basis functions
     defined by the power basis object.  Each element is the inner
     product of two power basis functions after applying the derivative
     or linear differential operator defined by 'Lfdobj'.

_S_e_e _A_l_s_o:

     'create.power.basis',  'powerbasis'

_E_x_a_m_p_l_e_s:

     #  set up an power basis with 3 basis functions.
     #  the powers are 0, 1, and 2.
     basisobj <- create.power.basis(c(0,1),3,c(0,1,2))
     #  compute the 3 by 3 matrix of inner products of second derivatives
     #FIXME
     #penmat <- powerpen(basisobj, 2)

