create.monomial.basis          package:fda          R Documentation

_C_r_e_a_t_e _a _M_o_n_o_m_i_a_l _B_a_s_i_s

_D_e_s_c_r_i_p_t_i_o_n:

     Creates a set of basis functions consisting of powers of the
     argument.

_U_s_a_g_e:

     create.monomial.basis(rangeval=c(0, 1), nbasis=2,
                           exponents=NULL, dropind=NULL,
                           quadvals=NULL, values=NULL)

_A_r_g_u_m_e_n_t_s:

rangeval: a vector of length 2 containing the initial and final values
          of the interval over which the functional data object can be
          evaluated. 

  nbasis: the number of basis functions. The default is 2, which
          defines a basis for straight lines. 

exponents: the nonnegative integer powers to be used.  By default,
          these are 0, 1, 2, ..., ' nbasis '. 

 dropind: a vector of integers specifiying the basis functions to be
          dropped, if any.  For example, if it is required that a
          function be zero at the left boundary, this is achieved by
          dropping the first basis function, the only one that is
          nonzero at that point. Default value NULL. 

quadvals: a matrix with two columns and a number of rows equal to the
          number of argument values used to approximate an integral
          using Simpson's rule. The first column contains these
          argument values. A minimum of 5 values are required for each
          inter-knot interval, and that is often enough. These are
          equally spaced between two adjacent knots. The second column
          contains the weights used for Simpson's rule.  These are
          proportional to 1, 4, 2, 4, ..., 2, 4, 1. 

  values: a list containing the basis functions and their derivatives
          evaluated at the quadrature points contained in the first
          column of ' quadvals '. 

_V_a_l_u_e:

     a basis object with the type 'monom'.

_S_e_e _A_l_s_o:

     'basisfd',  'create.bspline.basis',  'create.constant.basis', 
     'create.fourier.basis',  'create.exponential.basis', 
     'create.polygonal.basis',  'create.polynomial.basis', 
     'create.power.basis'

_E_x_a_m_p_l_e_s:

     ##
     ## simplest example: one constant 'basis function' 
     ##
     m0 <- create.monomial.basis(nbasis=1, exponents=0)
     plot(m0)

     ##
     ## Create a monomial basis over the interval [-1,1]
     ##  consisting of the first three powers of t
     ##
     basisobj <- create.monomial.basis(c(-1,1), 3)
     #  plot the basis
     plot(basisobj)

