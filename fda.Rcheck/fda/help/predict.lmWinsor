predict.lmWinsor             package:fda             R Documentation

_P_r_e_d_i_c_t _m_e_t_h_o_d _f_o_r _W_i_n_s_o_r_i_z_e_d _l_i_n_e_a_r _m_o_d_e_l _f_i_t_s

_D_e_s_c_r_i_p_t_i_o_n:

     Model predictions for object of class 'lmWinsor'.

_U_s_a_g_e:

     ## S3 method for class 'lmWinsor':
     predict(object, newdata, se.fit = FALSE,
          scale = NULL, df = Inf, 
          interval = c("none", "confidence", "prediction"),
          level = 0.95, type = c("response", "terms"), 
          terms = NULL, na.action = na.pass,
          pred.var = res.var/weights, weights = 1, ...)

_A_r_g_u_m_e_n_t_s:

 object : Object of class inheriting from 'lmWinsor'   

 newdata : An optional data frame in which to look for variables with
          which to predict.  If omitted, the fitted values are used.  

  se.fit: a switch indicating if standard errors of predictions are
          required  

  scale : Scale parameter for std.err. calculation   

      df: degrees of freedom for scale  

interval: type of prediction (response or model term)  

  level : Tolerance/confidence level 

   type : Type of prediction (response or model term);  see predict.lm  

   terms: If 'type="terms"', which terms (default is all terms) 

na.action: function determining what should be done with missing values
          in 'newdata'.  The default is to predict 'NA'.  

 pred.var : the variance(s) for future observations to be assumed for
          prediction intervals.  See predict.lm 'Details'. 

 weights : variance weights for prediction. This can be a numeric
          vector or a one-sided model formula. In the latter case, it
          is interpreted as an expression evaluated in 'newdata' 

     ...: additional arguments for other methods 

_D_e_t_a_i_l_s:

     1.  Identify inputs and outputs via mdly <- mdlx <-
     formula(object); mdly[[3]] <- NULL;  mdlx[[2]] <- NULL;  xNames <-
     all.vars(mdlx); yNames <- all.vars(mdly).  Give an error if
     as.character(mdly[[2]]) != yNames.  

     2.  If 'newdata' are provided, clip all xNames to
     (object[["lower"]], object[["upper"]]). 

     3.  Call predict.lm  

     4.  Clip the responses to the relevant components of
     (object[["lower"]], object[["upper"]]).

     5.  Done.

_V_a_l_u_e:

     'predict.lmWinsor' produces a vector of predictions or a matrix of
     predictions with limits or a list, as produced by predict.lm

_A_u_t_h_o_r(_s):

     Spencer Graves

_S_e_e _A_l_s_o:

     'lmWinsor' 'predict.lm'

_E_x_a_m_p_l_e_s:

     # example from 'anscombe' 
     lm.1 <- lmWinsor(y1~x1, data=anscombe)

     newD <- data.frame(x1=seq(1, 22, .1))
     predW <- predict(lm.1, newdata=newD) 
     plot(y1~x1, anscombe, xlim=c(1, 22)) 
     lines(newD[["x1"]], predW, col='blue')
     abline(h=lm.1[['lower']]['y1'], col='red', lty='dashed') 
     abline(h=lm.1[['upper']]['y1'], col='red', lty='dashed')
     abline(v=lm.1[['lower']]['x1'], col='green', lty='dashed') 
     abline(v=lm.1[['upper']]['x1'], col='green', lty='dashed') 

