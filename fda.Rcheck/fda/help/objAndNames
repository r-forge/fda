objAndNames               package:fda               R Documentation

_A_d_d _n_a_m_e_s _t_o _a_n _o_b_j_e_c_t

_D_e_s_c_r_i_p_t_i_o_n:

     Add names to an object from 'preferred' if available and 'default'
     if not.

_U_s_a_g_e:

     objAndNames(object, preferred, default)

_A_r_g_u_m_e_n_t_s:

  object: an object of some type to which names must be added.  If
          length(dim(object))>0 add 'dimnames', else add 'names'.   

preferred: A list to check first for names to add to 'object'.   

 default: A list to check for names to add to 'object' if appropriate
          names are not found in 'preferred'.   

_D_e_t_a_i_l_s:

     1.  If length(dim(object))<1, names(object) are taken from
     'preferred' if they are not NULL and have the correct length, else
     try 'default'.

     2.  Else for(lvl in 1:length(dim(object))) take dimnames[[lvl]]
     from 'preferred[[i]]' if they are not NULL and have the correct
     length, else try 'default[[lvl]].

_V_a_l_u_e:

     An object of the same class and structure as 'object' but with
     either names or dimnames added or changed.

_A_u_t_h_o_r(_s):

     Spencer Graves

_S_e_e _A_l_s_o:

     'data2fd',  'bifd'

_E_x_a_m_p_l_e_s:

     # The following should NOT check 'anything' here
     tst1 <- objAndNames(1:2, list(letters[1:2], LETTERS[1:2]), anything)
     all.equal(tst1, c(a=1, b=2))

     # The following should return 'object unchanged
     tst2 <- objAndNames(1:2, NULL, list(letters))
     all.equal(tst2, 1:2)

     tst3 <- objAndNames(1:2, list("a", 2), list(letters[1:2]))
     all.equal(tst3, c(a=1, b=2) )

     # The following checks a matrix / array
     tst4 <- array(1:6, dim=c(2,3))
     tst4a <- tst4
     dimnames(tst4a) <- list(letters[1:2], LETTERS[1:3])
     tst4b <- objAndNames(tst4, 
            list(letters[1:2], LETTERS[1:3]), anything)
     all.equal(tst4b, tst4a)

     tst4c <- objAndNames(tst4, NULL,        
            list(letters[1:2], LETTERS[1:3]) )
     all.equal(tst4c, tst4a)

