basisfd                 package:fda                 R Documentation

_D_e_f_i_n_e _a _F_u_n_c_t_i_o_n_a_l _B_a_s_i_s _O_b_j_e_c_t

_D_e_s_c_r_i_p_t_i_o_n:

     This is the constructor function for objects of the 'basisfd'
     class.  Each function that sets up an object of this class must
     call this function.  This includes functions
     'create.bspline.basis', 'create.constant.basis',
     'create.fourier.basis', and so forth that set up basis objects of
     a specific type.  Ordinarily, user of the functional data analysis
     software will not need to call this function directly, but these
     notes are valuable to understanding what the "slots" or "members"
     of the 'basisfd' class are.

_U_s_a_g_e:

     basisfd(type, rangeval, nbasis, params,
             dropind=NULL, quadvals=NULL,
             values=vector("list", 0))

_A_r_g_u_m_e_n_t_s:

    type: a character string indicating the type of basis.  Currently,
          there are eight possible types:


             1.  bspline

             2.  const

             3.  expon

             4.  fourier

             5.  monom

             6.  polyg

             7.  polynom

             8.  power


rangeval: a vector of length 2 containing the lower and upper
          boundaries of the range over which the basis is defined 

  nbasis: the number of basis functions 

  params: a vector of parameter values defining the basis 

 dropind: a vector of integers specifiying the basis functions to be
          dropped, if any.  For example, if it is required that a
          function be zero at the left boundary, this is achieved by
          dropping the first basis function, the only one that is
          nonzero at that point. Default value NULL. 

quadvals: a matrix with two columns and a number of rows equal to the
          number of argument values used to approximate an integral
          using Simpson's rule. The first column contains these
          argument values. A minimum of 5 values are required for each
          inter-knot interval, and that is often enough. These are
          equally spaced between two adjacent knots. The second column
          contains the weights used for Simpson's rule.  These are
          proportional to 1, 4, 2, 4, ..., 2, 4, 1. 

  values: a list containing the basis functions and their derivatives
          evaluated at the quadrature points contained in the first
          column of ' quadvals '. 

_D_e_t_a_i_l_s:

     Previous versions of the 'fda' software used the name 'basis' for
     this class, and the code in Matlab still does.  However, this
     class name was already used elsewhere in the S languages, and
     there was a potential for a clash that might produce mysterious
     and perhaps disastrous consequences.

     To check that an object is of this class, use function 'is.basis'.

     It is comparatively simple to add new basis types.  The code in
     the following functions needs to be estended to allow for the new
     type: 'basisfd', 'use.proper.basis', 'getbasismatrix' and
     'getbasispenalty'. In addition, a new "create" function should be
     written for the new type, as well as functions analogous to
     'fourier' and 'fourierpen' for evaluating basis functions for
     basis penalty matrices.

     The "create" function names are rather long, and users who mind
     all that typing might be advised to modify these to versions with
     shorter names, such as "splbas", "conbas", and etc.  However, a
     principle of good programming practice is to keep the code
     readable, preferably by somebody other than the programmer.

     Normally only developers of new basis types will actually need to
     use this function, so no examples are provided.

_V_a_l_u_e:

     an object of class 'basisfd'

_S_o_u_r_c_e:

     Ramsay, James O., and Silverman, Bernard W. (2006), _Functional
     Data Analysis, 2nd ed._, Springer, New York.

     Ramsay, James O., and Silverman, Bernard W. (2002), _Applied
     Functional Data Analysis_, Springer, New York

_S_e_e _A_l_s_o:

     'is.basis',  'is.eqbasis',  'plot.basisfd',  'getbasismatrix', 
     'getbasispenalty',  'create.bspline.basis', 
     'create.constant.basis',  'create.exponential.basis', 
     'create.fourier.basis',  'create.monomial.basis', 
     'create.polygonal.basis',  'create.polynomial.basis', 
     'create.power.basis'

