fda-package               package:fda               R Documentation

_F_u_n_c_t_i_o_n_a_l _D_a_t_a _A_n_a_l_y_s_i_s _i_n _R

_D_e_s_c_r_i_p_t_i_o_n:

     Functions and data sets companion to Ramsay, J. O., and Silverman,
     B. W. (2005) Functional Data Analysis, 2nd ed. and (2002) Applied
     Functional Data Analysis (Springer).  This includes finite bases
     approximations (such as splines and Fourier series) to functions
     fit to data smoothing on the integral of the squared deviations
     from an arbitrary differential operator.

_D_e_t_a_i_l_s:


       Package:   fda
       Type:      Package
       Version:   2.0.5
       Date:      2008-05-05
       License:   GPL-2
       LazyLoad:  yes

_A_u_t_h_o_r(_s):

     J. O. Ramsay,

     Maintainer:  J. O. Ramsay <ramsay@psych.mcgill.ca>

_R_e_f_e_r_e_n_c_e_s:

     Ramsay, James O., and Silverman, Bernard W. (2005), _Functional
     Data Analysis, 2nd ed._, Springer, New York.

     Ramsay, James O., and Silverman, Bernard W. (2002), _Applied
     Functional Data Analysis_, Springer, New York.

_E_x_a_m_p_l_e_s:

     ##
     ## Simple smoothing
     ##
     girlGrowthSm <- with(growth, smooth.basisPar(argvals=age, y=hgtf))
     plot(girlGrowthSm$fd, xlab="age", ylab="height (cm)",
              main="Girls in Berkeley Growth Study" )
     plot(deriv(girlGrowthSm$fd), xlab="age", ylab="growth rate (cm / year)",
              main="Girls in Berkeley Growth Study" )
     plot(deriv(girlGrowthSm$fd, 2), xlab="age",
             ylab="growth acceleration (cm / year^2)",
             main="Girls in Berkeley Growth Study" )
     ##
     ## Simple basis
     ##
     bspl1.2 <- create.bspline.basis(norder=1, breaks=c(0,.5, 1))
     plot(bspl1.2)
     # 2 bases, order 1 = degree 0 = step functions:
     # (1) constant 1 between 0 and 0.5 and 0 otherwise
     # (2) constant 1 between 0.5 and 1 and 0 otherwise.

     fd1.2 <- Data2fd(0:1, basisobj=bspl1.2)
     op <- par(mfrow=c(2,1))
     plot(bspl1.2, main='bases')
     plot(fd1.2, main='fit')
     par(op)
     # A step function:  0 to time=0.5, then 1 after

