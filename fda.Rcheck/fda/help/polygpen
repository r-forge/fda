polygpen                 package:fda                 R Documentation

_P_o_l_y_g_o_n_a_l _P_e_n_a_l_t_y _M_a_t_r_i_x

_D_e_s_c_r_i_p_t_i_o_n:

     Computes the matrix defining the roughness penalty for functions
     expressed in terms of a polygonal basis.

_U_s_a_g_e:

     polygpen(basisobj, Lfdobj=int2Lfd(1))

_A_r_g_u_m_e_n_t_s:

basisobj: a polygonal functional basis object. 

  Lfdobj: either an integer that is either 0 or 1, or a linear
          differential operator object of degree 0 or 1. 

_D_e_t_a_i_l_s:

     a roughness penalty for a function $ x(t) $ is defined by
     integrating the square of either the derivative of  $ x(t) $ or,
     more generally, the result of applying a linear differential
     operator $ L $ to it.  The only roughness penalty possible aside
     from penalizing the size of the function itself is the integral of
     the square of the first derivative, and this is the default. To
     apply this roughness penalty, the matrix of inner products
     produced by this function is necessary.

_V_a_l_u_e:

     a symmetric matrix of order equal to the number of basis functions
     defined by the polygonal basis object.  Each element is the inner
     product of two polygonal basis functions after applying the
     derivative or linear differential operator defined by Lfdobj.

_S_e_e _A_l_s_o:

     'create.polygonal.basis', 'polyg'

_E_x_a_m_p_l_e_s:

     #  set up a sequence of 11 argument values
     argvals <- seq(0,1,0.1)
     #  set up the polygonal basis
     basisobj <- create.polygonal.basis(argvals)
     #  compute the 11 by 11 penalty matrix

     penmat <- polygpen(basisobj)

