coef.fd                 package:fda                 R Documentation

_E_x_t_r_a_c_t _f_u_n_c_t_i_o_n_a_l _c_o_e_f_f_i_c_i_e_n_t_s

_D_e_s_c_r_i_p_t_i_o_n:

     Obtain the coefficients component from a functional object
     (functional data, class 'fd', functional parameter, class 'fdPar',
     a functional smooth, class 'fdSmooth', or a Taylor spline
     representation, class 'Taylor'.

_U_s_a_g_e:

     ## S3 method for class 'fd':
     coef(object, ...)
     ## S3 method for class 'fdPar':
     coef(object, ...)
     ## S3 method for class 'fdSmooth':
     coef(object, ...)
     ## S3 method for class 'Taylor':
     coef(object, ...)
     ## S3 method for class 'fd':
     coefficients(object, ...)
     ## S3 method for class 'fdPar':
     coefficients(object, ...)
     ## S3 method for class 'fdSmooth':
     coefficients(object, ...)
     ## S3 method for class 'Taylor':
     coefficients(object, ...)

_A_r_g_u_m_e_n_t_s:

  object: An object whose functional coefficients are desired  

    ... : other arguments  

_D_e_t_a_i_l_s:

     Functional representations are evaluated by multiplying a basis
     function matrix times a coefficient vector, matrix or
     3-dimensional array. (The basis function matrix contains the basis
     functions as columns evaluated at the 'evalarg' values as rows.)

_V_a_l_u_e:

     A numeric vector or array of the coefficients.

_S_e_e _A_l_s_o:

     'coef' 'fd' 'fdPar' 'smooth.basisPar' 'smooth.basis'

_E_x_a_m_p_l_e_s:

     ##
     ## coef.fd
     ##
     bspl1.1 <- create.bspline.basis(norder=1, breaks=0:1)
     fd.bspl1.1 <- fd(0, basisobj=bspl1.1)
     coef(fd.bspl1.1)


     ##
     ## coef.fdPar 
     ##
     rangeval <- c(-3,3)
     #  set up some standard normal data
     x <- rnorm(50)
     #  make sure values within the range
     x[x < -3] <- -2.99
     x[x >  3] <-  2.99
     #  set up basis for W(x)
     basisobj <- create.bspline.basis(rangeval, 11)
     #  set up initial value for Wfdobj
     Wfd0 <- fd(matrix(0,11,1), basisobj)
     WfdParobj <- fdPar(Wfd0)

     coef(WfdParobj)


     ##
     ## coef.fdSmooth
     ##

     girlGrowthSm <- with(growth, smooth.basisPar(argvals=age, y=hgtf))
     coef(girlGrowthSm)


     ##
     ## coef.Taylor 
     ##
     # coming soon.

